name: Deploy to Vercel

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Lint and Test
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build types package
        run: pnpm --filter @zerex-carbon/types build

      - name: Type check
        run: pnpm type-check

      - name: Lint
        run: pnpm lint

      - name: Test
        run: pnpm test

  # Build and Deploy
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build types package
        run: pnpm --filter @zerex-carbon/types build

      - name: Build web app
        run: pnpm --filter @zerex-carbon/web build
        env:
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}

      - name: Build API
        run: pnpm --filter @zerex-carbon/api build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

  # Lighthouse Performance Test
  lighthouse:
    name: Lighthouse Performance Test
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for deployment
        run: sleep 60

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ steps.deploy.outputs.preview-url }}
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Comment PR with Lighthouse results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read Lighthouse results
            const resultsPath = path.join(process.cwd(), '.lighthouseci');
            const results = fs.readdirSync(resultsPath)
              .filter(file => file.endsWith('.json'))
              .map(file => JSON.parse(fs.readFileSync(path.join(resultsPath, file), 'utf8')));
            
            if (results.length > 0) {
              const result = results[0];
              const scores = result.categories;
              
              const comment = `## üöÄ Lighthouse Performance Report
              
              **Performance Score:** ${Math.round(scores.performance.score * 100)}/100
              **Accessibility Score:** ${Math.round(scores.accessibility.score * 100)}/100
              **Best Practices Score:** ${Math.round(scores['best-practices'].score * 100)}/100
              **SEO Score:** ${Math.round(scores.seo.score * 100)}/100
              
              ### Key Metrics:
              - **First Contentful Paint:** ${result.audits['first-contentful-paint'].displayValue}
              - **Largest Contentful Paint:** ${result.audits['largest-contentful-paint'].displayValue}
              - **Cumulative Layout Shift:** ${result.audits['cumulative-layout-shift'].displayValue}
              - **Speed Index:** ${result.audits['speed-index'].displayValue}
              
              üìä [View Full Report](${result.lhr.lighthouseVersion})
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Notify on Success
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy, lighthouse]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Notify Success
        if: needs.deploy.result == 'success'
        run: |
          echo "‚úÖ Deployment successful!"
          echo "üåç Production URL: https://zerex-carbon.vercel.app"
          
      - name: Notify Failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          exit 1
